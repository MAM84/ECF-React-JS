{"ast":null,"code":"const baserequest = 'https://musicbrainz.org/ws/2/recording';\n\nfunction sendSearch(selectValue, searchValue, offset, addResponse) {\n  const request = new XMLHttpRequest();\n\n  if (selectValue === \"everything\") {\n    request.open(\"GET\", baserequest + '?query=\"' + searchValue + '\"&fmt=json&limit=100&offset=' + offset, true);\n  } else {\n    request.open(\"GET\", baserequest + '?query=' + selectValue + ':\"' + searchValue + '\"&fmt=json&limit=100&offset=' + offset, true);\n  }\n\n  request.addEventListener(\"readystatechange\", function () {\n    if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {\n      const response = JSON.parse(request.responseText);\n      addResponse(response);\n    }\n  });\n  request.send();\n}\n\nfunction sendSearchDetails(idRecording, addDetails) {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", baserequest + '/' + idRecording + '?inc=ratings+genres+releases+artists&fmt=json', true);\n  request.addEventListener(\"readystatechange\", function () {\n    if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {\n      const response = JSON.parse(request.responseText);\n      addDetails(response);\n    }\n  });\n  request.send();\n}\n\nfunction sendSearchCover(idRelease, addCover) {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", 'https://coverartarchive.org/release/' + idRelease, true);\n  request.addEventListener(\"readystatechange\", function () {\n    if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {\n      const response = JSON.parse(request.responseText);\n      addCover(response);\n    }\n  });\n  request.send();\n}\n\nexport { sendSearch, sendSearchDetails, sendSearchCover };","map":{"version":3,"sources":["/Users/marionmetais/Documents/Exercices/React JS/Projets/ecf/src/api/musicBrainzAPI.js"],"names":["baserequest","sendSearch","selectValue","searchValue","offset","addResponse","request","XMLHttpRequest","open","addEventListener","readyState","DONE","status","response","JSON","parse","responseText","send","sendSearchDetails","idRecording","addDetails","sendSearchCover","idRelease","addCover"],"mappings":"AAAA,MAAMA,WAAW,GAAG,wCAApB;;AAEA,SAASC,UAAT,CAAoBC,WAApB,EAAiCC,WAAjC,EAA8CC,MAA9C,EAAsDC,WAAtD,EAAkE;AAC9D,QAAMC,OAAO,GAAG,IAAIC,cAAJ,EAAhB;;AACA,MAAGL,WAAW,KAAK,YAAnB,EAAgC;AAC5BI,IAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBR,WAAW,GAAG,UAAd,GAA2BG,WAA3B,GAAwC,8BAAxC,GAAyEC,MAA7F,EAAqG,IAArG;AACH,GAFD,MAEK;AACDE,IAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBR,WAAW,GAAG,SAAd,GAA0BE,WAA1B,GAAwC,IAAxC,GAA+CC,WAA/C,GAA4D,8BAA5D,GAA6FC,MAAjH,EAAyH,IAAzH;AACH;;AACDE,EAAAA,OAAO,CAACG,gBAAR,CAAyB,kBAAzB,EAA4C,YAAU;AAClD,QAAGH,OAAO,CAACI,UAAR,KAAuBH,cAAc,CAACI,IAAtC,IAA8CL,OAAO,CAACM,MAAR,KAAmB,GAApE,EAAwE;AACpE,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,YAAnB,CAAjB;AACAX,MAAAA,WAAW,CAACQ,QAAD,CAAX;AACH;AACJ,GALD;AAMAP,EAAAA,OAAO,CAACW,IAAR;AACH;;AAED,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCC,UAAxC,EAAmD;AAC/C,QAAMd,OAAO,GAAG,IAAIC,cAAJ,EAAhB;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBR,WAAW,GAAG,GAAd,GAAoBmB,WAApB,GAAkC,+CAAtD,EAAuG,IAAvG;AACAb,EAAAA,OAAO,CAACG,gBAAR,CAAyB,kBAAzB,EAA4C,YAAU;AAClD,QAAGH,OAAO,CAACI,UAAR,KAAuBH,cAAc,CAACI,IAAtC,IAA8CL,OAAO,CAACM,MAAR,KAAmB,GAApE,EAAwE;AACpE,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,YAAnB,CAAjB;AACAI,MAAAA,UAAU,CAACP,QAAD,CAAV;AACH;AACJ,GALD;AAMAP,EAAAA,OAAO,CAACW,IAAR;AACH;;AAED,SAASI,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA6C;AACzC,QAAMjB,OAAO,GAAG,IAAIC,cAAJ,EAAhB;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoB,yCAAyCc,SAA7D,EAAwE,IAAxE;AACAhB,EAAAA,OAAO,CAACG,gBAAR,CAAyB,kBAAzB,EAA4C,YAAU;AAClD,QAAGH,OAAO,CAACI,UAAR,KAAuBH,cAAc,CAACI,IAAtC,IAA8CL,OAAO,CAACM,MAAR,KAAmB,GAApE,EAAwE;AACpE,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,YAAnB,CAAjB;AACAO,MAAAA,QAAQ,CAACV,QAAD,CAAR;AACH;AACJ,GALD;AAMAP,EAAAA,OAAO,CAACW,IAAR;AACH;;AAED,SAAQhB,UAAR,EAAoBiB,iBAApB,EAAuCG,eAAvC","sourcesContent":["const baserequest = 'https://musicbrainz.org/ws/2/recording';\n\nfunction sendSearch(selectValue, searchValue, offset, addResponse){\n    const request = new XMLHttpRequest();\n    if(selectValue === \"everything\"){\n        request.open(\"GET\", baserequest + '?query=\"' + searchValue +'\"&fmt=json&limit=100&offset=' + offset, true);\n    }else{\n        request.open(\"GET\", baserequest + '?query=' + selectValue + ':\"' + searchValue +'\"&fmt=json&limit=100&offset=' + offset, true);\n    }\n    request.addEventListener(\"readystatechange\",function(){\n        if(request.readyState === XMLHttpRequest.DONE && request.status === 200){\n            const response = JSON.parse(request.responseText);\n            addResponse(response);\n        }\n    });\n    request.send();\n}\n\nfunction sendSearchDetails(idRecording, addDetails){\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", baserequest + '/' + idRecording + '?inc=ratings+genres+releases+artists&fmt=json', true);\n    request.addEventListener(\"readystatechange\",function(){\n        if(request.readyState === XMLHttpRequest.DONE && request.status === 200){\n            const response = JSON.parse(request.responseText);\n            addDetails(response);\n        }\n    });\n    request.send();\n}\n\nfunction sendSearchCover(idRelease, addCover){\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", 'https://coverartarchive.org/release/' + idRelease, true);\n    request.addEventListener(\"readystatechange\",function(){\n        if(request.readyState === XMLHttpRequest.DONE && request.status === 200){\n            const response = JSON.parse(request.responseText);\n            addCover(response);\n        }\n    });\n    request.send();\n}\n\nexport {sendSearch, sendSearchDetails, sendSearchCover};\n"]},"metadata":{},"sourceType":"module"}